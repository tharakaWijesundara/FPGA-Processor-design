module processor (
    input clk,
    input start,
    output reg finish_process
);

reg start_core_one;
reg start_core_two;
reg start_core_three;

wire read;
wire write;

wire [15:0] ram_addr_one; 
wire [15:0] ram_in_one;
wire [15:0] ram_out_one;

wire [15:0] ram_addr_two; 
wire [15:0] ram_in_two;
wire [15:0] ram_out_two;

wire [15:0] ram_addr_three; 
wire [15:0] ram_in_three;
wire [15:0] ram_out_three;

wire finish_core_one;
wire finish_core_two;
wire finish_core_three;

wire address[47:0];
wire data_in[47:0];
wire data_out[47:0];

assign address = {ram_addr_three ,ram_addr_two, ram_addr_one};
assign data_in = {ram_in_three, ram_in_two, ram_in_one};
assign data_out = {ram_out_three, ram_out_two, ram_out_one};


top_module CORE_ONE(.clk(clk), 
                    .start(start_core_one), 
                    .read(read), 
                    .write(write), 
                    .ram_addr(ram_addr_one), 
                    .ram_in(ram_in_one), 
                    .ram_out(ram_out_one), 
                    .finish(finish_core_one));

top_module CORE_TWO(.clk(clk), 
                    .start(start_core_two), 
                    .read(read), 
                    .write(write), 
                    .ram_addr(ram_addr_two), 
                    .ram_in(ram_in_two), 
                    .ram_out(ram_out_two), 
                    .finish(finish_core_two));

top_module CORE_THREE(.clk(clk), 
                    .start(start_core_three), 
                    .read(read), 
                    .write(write), 
                    .ram_addr(ram_addr_three), 
                    .ram_in(ram_in_three), 
                    .ram_out(ram_out_three), 
                    .finish(finish_core_three));


ram RAM(.clk(clk), 
        .read(read),
        .write(write),
        .address(address),
        .data_in(data_in),
        .data_out(data_out));


always @(finish_core_one or finish_core_two or finish_core_three) begin
    if(finish_core_one == 1 && finish_core_two == 1 && finish_core_three == 1)    finish_process <= 1;
end

always @(start) begin
    start_core_one <= 1;
    start_core_two <= 1;
    start_core_three <= 1;
end

always @(address) begin
    if(address == {16'd5, 16'd5, 16'd5}) begin
        start_core_two <= 0;
        start_core_three <= 0;
    end
    else if(address == {16'd5, 16'd5, 16'd23}) begin
        start_core_one <= 0;
        start_core_two <= 1;
        start_core_three <= 1;
    end
    else if(address == {16'd23, 16'd23, 16'd23}) begin
        start_core_one <= 1;
    end
end


    
endmodule